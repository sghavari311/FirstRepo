{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Monaco;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red242\green242\blue242;\red25\green28\blue31;
\red144\green1\blue18;\red15\green112\blue1;\red245\green245\blue245;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c100000;\cssrgb\c96078\c96078\c96078;\cssrgb\c12941\c14510\c16078;
\cssrgb\c63922\c8235\c8235;\cssrgb\c0\c50196\c0;\cssrgb\c96863\c96863\c96863;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 package\cf4 \strokec4  apiTests;\
\
\cf2 \strokec2 import\cf4 \strokec4  java.util.List;\
\cf2 \strokec2 import\cf4 \strokec4  java.util.Map;\
\
\cf2 \strokec2 import\cf4 \strokec4  org.junit.Assert;\
\
\cf2 \strokec2 import\cf4 \strokec4  io.restassured.RestAssured;\
\cf2 \strokec2 import\cf4 \strokec4  io.restassured.path.json.JsonPath;\
\cf2 \strokec2 import\cf4 \strokec4  io.restassured.response.Response;\
\cf2 \strokec2 import\cf4 \strokec4  io.restassured.specification.RequestSpecification;\
\
\cf2 \strokec2 public\cf4 \strokec4  \cf2 \strokec2 class\cf4 \strokec4  \cf5 \strokec5 E2E_Tests\cf4 \strokec4  \{\
\
    \cf2 \strokec2 public\cf4 \strokec4  \cf2 \strokec2 static\cf4 \strokec4  \cf2 \strokec2 void\cf4 \strokec4  \cf5 \strokec5 main\cf4 \strokec4 (String[] args) \{\
        \cf5 \strokec5 String\cf4 \strokec4  \cf6 \strokec6 userID\cf4 \strokec4  = \cf5 \strokec5 "9b5f49ab-eea9-45f4-9d66-bcf56a531b85"\cf4 \strokec4 ;\
        \cf5 \strokec5 String\cf4 \strokec4  \cf6 \strokec6 userName\cf4 \strokec4  = \cf5 \strokec5 "TOOLSQA-Test"\cf4 \strokec4 ;\
        \cf5 \strokec5 String\cf4 \strokec4  \cf6 \strokec6 password\cf4 \strokec4  = \cf5 \strokec5 "Test@@123"\cf4 \strokec4 ;\
        \cf5 \strokec5 String\cf4 \strokec4  \cf6 \strokec6 baseUrl\cf4 \strokec4  = \cf5 \strokec5 "https://bookstore.toolsqa.com"\cf4 \strokec4 ;\
\
        RestAssured.baseURI = baseUrl;\
        \cf5 \strokec5 RequestSpecification\cf4 \strokec4  \cf6 \strokec6 request\cf4 \strokec4  = RestAssured.given();\
        request.header(\cf5 \strokec5 "Content-Type"\cf4 \strokec4 , \cf5 \strokec5 "application/json"\cf4 \strokec4 );\
        \cf5 \strokec5 Response\cf4 \strokec4  \cf6 \strokec6 response\cf4 \strokec4  = request.body(\cf5 \strokec5 "\{ \\"userName\\":\\""\cf4 \strokec4  + userName + \cf5 \strokec5 "\\", \\"password\\":\\""\cf4 \strokec4  + password + \cf5 \strokec5 "\\"\}"\cf4 \strokec4 )\
                .post(\cf5 \strokec5 "/Account/v1/GenerateToken"\cf4 \strokec4 );\
\
        Assert.assertEquals(response.getStatusCode(), 200);\
        \cf5 \strokec5 String\cf4 \strokec4  \cf6 \strokec6 jsonString\cf4 \strokec4  = response.asString();\
        Assert.assertTrue(jsonString.contains(\cf5 \strokec5 "token"\cf4 \strokec4 ));\
        \cf5 \strokec5 String\cf4 \strokec4  \cf6 \strokec6 token\cf4 \strokec4  = JsonPath.from(jsonString).get(\cf5 \strokec5 "token"\cf4 \strokec4 );\
        response = request.get(\cf5 \strokec5 "/BookStore/v1/Books"\cf4 \strokec4 );\
        Assert.assertEquals(response.getStatusCode(), 200);\
        jsonString = response.asString();\
        List<Map<String, String>> books = JsonPath.from(jsonString).get(\cf5 \strokec5 "books"\cf4 \strokec4 );\
        Assert.assertTrue(books.size() > 0);\
        \cf5 \strokec5 String\cf4 \strokec4  \cf6 \strokec6 bookId\cf4 \strokec4  = books.get(0).get(\cf5 \strokec5 "isbn"\cf4 \strokec4 );\
        \cf6 \strokec6 //Step - 3\cf4 \strokec4 \
        \cf6 \strokec6 // Add a book - with Auth\cf4 \strokec4 \
        \cf6 \strokec6 //The token we had saved in the variable before from response in Step 1, \cf4 \strokec4 \
        \cf6 \strokec6 //we will be passing in the headers for each of the succeeding request\cf4 \strokec4 \
        request.header(\cf5 \strokec5 "Authorization"\cf4 \strokec4 , \cf5 \strokec5 "Bearer "\cf4 \strokec4  + token)\
                .header(\cf5 \strokec5 "Content-Type"\cf4 \strokec4 , \cf5 \strokec5 "application/json"\cf4 \strokec4 );\
\
        response = request.body(\cf5 \strokec5 "\{ \\"userId\\": \\""\cf4 \strokec4  + userID + \cf5 \strokec5 "\\", "\cf4 \strokec4  +\
                \cf5 \strokec5 "\\"collectionOfIsbns\\": [ \{ \\"isbn\\": \\""\cf4 \strokec4  + bookId + \cf5 \strokec5 "\\" \} ]\}"\cf4 \strokec4 )\
                .post(\cf5 \strokec5 "/BookStore/v1/Books"\cf4 \strokec4 );\
        Assert.assertEquals( 201, response.getStatusCode());\
        \cf6 \strokec6 //Step - 4\cf4 \strokec4 \
        \cf6 \strokec6 // Delete a book - with Auth\cf4 \strokec4 \
        request.header(\cf5 \strokec5 "Authorization"\cf4 \strokec4 , \cf5 \strokec5 "Bearer "\cf4 \strokec4  + token)\
                .header(\cf5 \strokec5 "Content-Type"\cf4 \strokec4 , \cf5 \strokec5 "application/json"\cf4 \strokec4 );\
        response = request.body(\cf5 \strokec5 "\{ \\"isbn\\": \\""\cf4 \strokec4  + bookId + \cf5 \strokec5 "\\", \\"userId\\": \\""\cf4 \strokec4  + userID + \cf5 \strokec5 "\\"\}"\cf4 \strokec4 )\
                .delete(\cf5 \strokec5 "/BookStore/v1/Book"\cf4 \strokec4 );\
        Assert.assertEquals(204, response.getStatusCode());\
        \cf6 \strokec6 //Step - 5\cf4 \strokec4 \
        \cf6 \strokec6 // Get User\cf4 \strokec4 \
        request.header(\cf5 \strokec5 "Authorization"\cf4 \strokec4 , \cf5 \strokec5 "Bearer "\cf4 \strokec4  + token)\
                .header(\cf5 \strokec5 "Content-Type"\cf4 \strokec4 , \cf5 \strokec5 "application/json"\cf4 \strokec4 );\
        response = request.get(\cf5 \strokec5 "/Account/v1/User/"\cf4 \strokec4  + userID);\
        Assert.assertEquals(200, response.getStatusCode());\
        jsonString = response.asString();\
        List<Map<String, String>> booksOfUser = JsonPath.from(jsonString).get(\cf5 \strokec5 "books"\cf4 \strokec4 );\
        Assert.assertEquals(0, booksOfUser.size());\
    \}\
\}
\f1\fs32 \cb7 \
}